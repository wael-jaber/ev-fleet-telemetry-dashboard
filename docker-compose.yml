version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        - VITE_BACKEND_HOST=${VITE_BACKEND_HOST}
        - VITE_BACKEND_PORT=${VITE_BACKEND_PORT:-5001}
    ports:
      - '${VITE_BACKEND_PORT:-5001}:${VITE_BACKEND_PORT:-5001}'
    environment:
      - PORT=${VITE_BACKEND_PORT:-5001}
    env_file:
      - .env
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-f',
          '${BACKEND_HEALTHCHECK_URL:-http://localhost:5001/health-check}',
        ]
      interval: 10s
      retries: 5
      start_period: 5s

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        - VITE_BACKEND_HOST=${VITE_BACKEND_HOST}
        - VITE_BACKEND_PORT=${VITE_BACKEND_PORT:-5001}
    ports:
      - '80:${FRONTEND_PORT:-3000}'
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT:-3000}
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test:
        ['CMD', 'curl', '-f', '${FRONTEND_HEALTHCHECK_URL:-http://localhost}']
      interval: 10s
      retries: 5
      start_period: 5s

  e2e:
    build:
      context: .
      dockerfile: e2e/Dockerfile
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT:-3000}
      - TEST_HOST=frontend
    env_file:
      - .env
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
